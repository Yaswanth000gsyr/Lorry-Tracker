{"ast":null,"code":"const express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst cors = require(\"cors\");\nconst bcrypt = require(\"bcrypt\");\nconst app = express();\nconst PORT = 5000;\nconst MONGO_URI = \"mongodb://127.0.0.1:27017/lorry-tracker\";\nconst CORS_ORIGIN = \"http://localhost:3000\";\n\n// Middleware\napp.use(cors({\n  origin: CORS_ORIGIN,\n  credentials: true\n}));\napp.use(express.json());\n\n// MongoDB connection\nmongoose.connect(MONGO_URI).then(() => console.log(\"Connected to MongoDB\")).catch(err => {\n  console.error(\"MongoDB connection error:\", err);\n  process.exit(1);\n});\n\n// User Schema\nconst userSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  number: {\n    type: String,\n    required: true\n  },\n  role: {\n    type: String,\n    required: true,\n    enum: [\"owner\", \"driver\", \"broker\"]\n  }\n});\nconst User = mongoose.model(\"User\", userSchema);\n\n// Load Schema\nconst loadSchema = new mongoose.Schema({\n  brokerNumber: String,\n  source: String,\n  destination: String,\n  loadType: String,\n  weight: String,\n  date: String,\n  price: String\n});\nconst Load = mongoose.model(\"Load\", loadSchema);\n\n// Register\napp.post(\"/api/signup\", async (req, res) => {\n  const {\n    email,\n    password,\n    number,\n    role\n  } = req.body;\n  const validRoles = [\"owner\", \"driver\", \"broker\"];\n  try {\n    if (!validRoles.includes(role)) {\n      return res.status(400).json({\n        message: \"Invalid role\"\n      });\n    }\n    const existingUser = await User.findOne({\n      email\n    });\n    if (existingUser) {\n      return res.status(400).json({\n        message: \"User already exists\"\n      });\n    }\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const newUser = new User({\n      email,\n      password: hashedPassword,\n      number,\n      role\n    });\n    await newUser.save();\n    res.status(201).json({\n      message: \"User registered successfully\"\n    });\n  } catch (err) {\n    console.error(\"Signup error:\", err);\n    res.status(500).json({\n      message: \"Error registering user\",\n      error: err.message\n    });\n  }\n});\n\n// Login\napp.post(\"/api/login\", async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    const user = await User.findOne({\n      email\n    });\n    if (!user) {\n      return res.status(401).json({\n        message: \"User not found\"\n      });\n    }\n    if (!(await bcrypt.compare(password, user.password))) {\n      return res.status(401).json({\n        message: \"Incorrect password\"\n      });\n    }\n    res.status(200).json({\n      message: \"Login successful\",\n      user: {\n        email: user.email,\n        role: user.role,\n        number: user.number\n      }\n    });\n  } catch (err) {\n    console.error(\"Login error:\", err);\n    res.status(500).json({\n      message: \"Login error\",\n      error: err.message\n    });\n  }\n});\n\n// Post Load (Broker only)\napp.post(\"/api/post-load\", async (req, res) => {\n  try {\n    const loadData = req.body;\n    const newLoad = new Load(loadData);\n    await newLoad.save();\n    res.status(201).json({\n      message: \"Load posted successfully\"\n    });\n  } catch (err) {\n    console.error(\"Post load error:\", err);\n    res.status(500).json({\n      message: \"Failed to post load\",\n      error: err.message\n    });\n  }\n});\n\n// Get All Loads\napp.get(\"/api/loads\", async (req, res) => {\n  try {\n    const loads = await Load.find();\n    res.status(200).json(loads);\n  } catch (err) {\n    console.error(\"Get loads error:\", err);\n    res.status(500).json({\n      message: \"Error fetching loads\",\n      error: err.message\n    });\n  }\n});\n\n// Delete all users or loads (for testing only)\napp.delete(\"/api/clear-users\", async (req, res) => {\n  try {\n    await User.deleteMany({});\n    res.status(200).json({\n      message: \"All users deleted\"\n    });\n  } catch (err) {\n    console.error(\"Clear users error:\", err);\n    res.status(500).json({\n      message: \"Error deleting users\",\n      error: err.message\n    });\n  }\n});\napp.delete(\"/api/clear-loads\", async (req, res) => {\n  try {\n    await Load.deleteMany({});\n    res.status(200).json({\n      message: \"All loads deleted\"\n    });\n  } catch (err) {\n    console.error(\"Clear loads error:\", err);\n    res.status(500).json({\n      message: \"Error deleting loads\",\n      error: err.message\n    });\n  }\n});\n\n// Global Error Handling\napp.use((err, req, res, next) => {\n  console.error(\"Global error:\", err);\n  res.status(500).json({\n    message: \"Something went wrong\"\n  });\n});\n\n// Start Server\nconst server = app.listen(PORT, () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n\n// Graceful Shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"SIGTERM received. Closing server...\");\n  server.close(() => {\n    mongoose.connection.close(false, () => {\n      console.log(\"MongoDB connection closed.\");\n      process.exit(0);\n    });\n  });\n});","map":{"version":3,"names":["express","require","mongoose","cors","bcrypt","app","PORT","MONGO_URI","CORS_ORIGIN","use","origin","credentials","json","connect","then","console","log","catch","err","error","process","exit","userSchema","Schema","email","type","String","required","unique","password","number","role","enum","User","model","loadSchema","brokerNumber","source","destination","loadType","weight","date","price","Load","post","req","res","body","validRoles","includes","status","message","existingUser","findOne","hashedPassword","hash","newUser","save","user","compare","loadData","newLoad","get","loads","find","delete","deleteMany","next","server","listen","on","close","connection"],"sources":["S:/lorry/logistics-app/src/components/LoginModal.jsx"],"sourcesContent":["const express = require(\"express\");\r\nconst mongoose = require(\"mongoose\");\r\nconst cors = require(\"cors\");\r\nconst bcrypt = require(\"bcrypt\");\r\n\r\nconst app = express();\r\nconst PORT = 5000;\r\nconst MONGO_URI = \"mongodb://127.0.0.1:27017/lorry-tracker\";\r\nconst CORS_ORIGIN = \"http://localhost:3000\";\r\n\r\n// Middleware\r\napp.use(\r\n  cors({\r\n    origin: CORS_ORIGIN,\r\n    credentials: true,\r\n  })\r\n);\r\napp.use(express.json());\r\n\r\n// MongoDB connection\r\nmongoose\r\n  .connect(MONGO_URI)\r\n  .then(() => console.log(\"Connected to MongoDB\"))\r\n  .catch((err) => {\r\n    console.error(\"MongoDB connection error:\", err);\r\n    process.exit(1);\r\n  });\r\n\r\n// User Schema\r\nconst userSchema = new mongoose.Schema({\r\n  email: { type: String, required: true, unique: true },\r\n  password: { type: String, required: true },\r\n  number: { type: String, required: true },\r\n  role: {\r\n    type: String,\r\n    required: true,\r\n    enum: [\"owner\", \"driver\", \"broker\"],\r\n  },\r\n});\r\nconst User = mongoose.model(\"User\", userSchema);\r\n\r\n// Load Schema\r\nconst loadSchema = new mongoose.Schema({\r\n  brokerNumber: String,\r\n  source: String,\r\n  destination: String,\r\n  loadType: String,\r\n  weight: String,\r\n  date: String,\r\n  price: String,\r\n});\r\nconst Load = mongoose.model(\"Load\", loadSchema);\r\n\r\n// Register\r\napp.post(\"/api/signup\", async (req, res) => {\r\n  const { email, password, number, role } = req.body;\r\n  const validRoles = [\"owner\", \"driver\", \"broker\"];\r\n  try {\r\n    if (!validRoles.includes(role)) {\r\n      return res.status(400).json({ message: \"Invalid role\" });\r\n    }\r\n    const existingUser = await User.findOne({ email });\r\n    if (existingUser) {\r\n      return res.status(400).json({ message: \"User already exists\" });\r\n    }\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    const newUser = new User({ email, password: hashedPassword, number, role });\r\n    await newUser.save();\r\n    res.status(201).json({ message: \"User registered successfully\" });\r\n  } catch (err) {\r\n    console.error(\"Signup error:\", err);\r\n    res.status(500).json({ message: \"Error registering user\", error: err.message });\r\n  }\r\n});\r\n\r\n// Login\r\napp.post(\"/api/login\", async (req, res) => {\r\n  const { email, password } = req.body;\r\n  try {\r\n    const user = await User.findOne({ email });\r\n    if (!user) {\r\n      return res.status(401).json({ message: \"User not found\" });\r\n    }\r\n    if (!(await bcrypt.compare(password, user.password))) {\r\n      return res.status(401).json({ message: \"Incorrect password\" });\r\n    }\r\n    res.status(200).json({\r\n      message: \"Login successful\",\r\n      user: {\r\n        email: user.email,\r\n        role: user.role,\r\n        number: user.number,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    console.error(\"Login error:\", err);\r\n    res.status(500).json({ message: \"Login error\", error: err.message });\r\n  }\r\n});\r\n\r\n// Post Load (Broker only)\r\napp.post(\"/api/post-load\", async (req, res) => {\r\n  try {\r\n    const loadData = req.body;\r\n    const newLoad = new Load(loadData);\r\n    await newLoad.save();\r\n    res.status(201).json({ message: \"Load posted successfully\" });\r\n  } catch (err) {\r\n    console.error(\"Post load error:\", err);\r\n    res.status(500).json({ message: \"Failed to post load\", error: err.message });\r\n  }\r\n});\r\n\r\n// Get All Loads\r\napp.get(\"/api/loads\", async (req, res) => {\r\n  try {\r\n    const loads = await Load.find();\r\n    res.status(200).json(loads);\r\n  } catch (err) {\r\n    console.error(\"Get loads error:\", err);\r\n    res.status(500).json({ message: \"Error fetching loads\", error: err.message });\r\n  }\r\n});\r\n\r\n// Delete all users or loads (for testing only)\r\napp.delete(\"/api/clear-users\", async (req, res) => {\r\n  try {\r\n    await User.deleteMany({});\r\n    res.status(200).json({ message: \"All users deleted\" });\r\n  } catch (err) {\r\n    console.error(\"Clear users error:\", err);\r\n    res.status(500).json({ message: \"Error deleting users\", error: err.message });\r\n  }\r\n});\r\n\r\napp.delete(\"/api/clear-loads\", async (req, res) => {\r\n  try {\r\n    await Load.deleteMany({});\r\n    res.status(200).json({ message: \"All loads deleted\" });\r\n  } catch (err) {\r\n    console.error(\"Clear loads error:\", err);\r\n    res.status(500).json({ message: \"Error deleting loads\", error: err.message });\r\n  }\r\n});\r\n\r\n// Global Error Handling\r\napp.use((err, req, res, next) => {\r\n  console.error(\"Global error:\", err);\r\n  res.status(500).json({ message: \"Something went wrong\" });\r\n});\r\n\r\n// Start Server\r\nconst server = app.listen(PORT, () => {\r\n  console.log(`Server running on http://localhost:${PORT}`);\r\n});\r\n\r\n// Graceful Shutdown\r\nprocess.on(\"SIGTERM\", () => {\r\n  console.log(\"SIGTERM received. Closing server...\");\r\n  server.close(() => {\r\n    mongoose.connection.close(false, () => {\r\n      console.log(\"MongoDB connection closed.\");\r\n      process.exit(0);\r\n    });\r\n  });\r\n});"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAEhC,MAAMI,GAAG,GAAGL,OAAO,CAAC,CAAC;AACrB,MAAMM,IAAI,GAAG,IAAI;AACjB,MAAMC,SAAS,GAAG,yCAAyC;AAC3D,MAAMC,WAAW,GAAG,uBAAuB;;AAE3C;AACAH,GAAG,CAACI,GAAG,CACLN,IAAI,CAAC;EACHO,MAAM,EAAEF,WAAW;EACnBG,WAAW,EAAE;AACf,CAAC,CACH,CAAC;AACDN,GAAG,CAACI,GAAG,CAACT,OAAO,CAACY,IAAI,CAAC,CAAC,CAAC;;AAEvB;AACAV,QAAQ,CACLW,OAAO,CAACN,SAAS,CAAC,CAClBO,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC,CAAC,CAC/CC,KAAK,CAAEC,GAAG,IAAK;EACdH,OAAO,CAACI,KAAK,CAAC,2BAA2B,EAAED,GAAG,CAAC;EAC/CE,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC;;AAEJ;AACA,MAAMC,UAAU,GAAG,IAAIpB,QAAQ,CAACqB,MAAM,CAAC;EACrCC,KAAK,EAAE;IAAEC,IAAI,EAAEC,MAAM;IAAEC,QAAQ,EAAE,IAAI;IAAEC,MAAM,EAAE;EAAK,CAAC;EACrDC,QAAQ,EAAE;IAAEJ,IAAI,EAAEC,MAAM;IAAEC,QAAQ,EAAE;EAAK,CAAC;EAC1CG,MAAM,EAAE;IAAEL,IAAI,EAAEC,MAAM;IAAEC,QAAQ,EAAE;EAAK,CAAC;EACxCI,IAAI,EAAE;IACJN,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE,IAAI;IACdK,IAAI,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ;EACpC;AACF,CAAC,CAAC;AACF,MAAMC,IAAI,GAAG/B,QAAQ,CAACgC,KAAK,CAAC,MAAM,EAAEZ,UAAU,CAAC;;AAE/C;AACA,MAAMa,UAAU,GAAG,IAAIjC,QAAQ,CAACqB,MAAM,CAAC;EACrCa,YAAY,EAAEV,MAAM;EACpBW,MAAM,EAAEX,MAAM;EACdY,WAAW,EAAEZ,MAAM;EACnBa,QAAQ,EAAEb,MAAM;EAChBc,MAAM,EAAEd,MAAM;EACde,IAAI,EAAEf,MAAM;EACZgB,KAAK,EAAEhB;AACT,CAAC,CAAC;AACF,MAAMiB,IAAI,GAAGzC,QAAQ,CAACgC,KAAK,CAAC,MAAM,EAAEC,UAAU,CAAC;;AAE/C;AACA9B,GAAG,CAACuC,IAAI,CAAC,aAAa,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC1C,MAAM;IAAEtB,KAAK;IAAEK,QAAQ;IAAEC,MAAM;IAAEC;EAAK,CAAC,GAAGc,GAAG,CAACE,IAAI;EAClD,MAAMC,UAAU,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC;EAChD,IAAI;IACF,IAAI,CAACA,UAAU,CAACC,QAAQ,CAAClB,IAAI,CAAC,EAAE;MAC9B,OAAOe,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACtC,IAAI,CAAC;QAAEuC,OAAO,EAAE;MAAe,CAAC,CAAC;IAC1D;IACA,MAAMC,YAAY,GAAG,MAAMnB,IAAI,CAACoB,OAAO,CAAC;MAAE7B;IAAM,CAAC,CAAC;IAClD,IAAI4B,YAAY,EAAE;MAChB,OAAON,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACtC,IAAI,CAAC;QAAEuC,OAAO,EAAE;MAAsB,CAAC,CAAC;IACjE;IACA,MAAMG,cAAc,GAAG,MAAMlD,MAAM,CAACmD,IAAI,CAAC1B,QAAQ,EAAE,EAAE,CAAC;IACtD,MAAM2B,OAAO,GAAG,IAAIvB,IAAI,CAAC;MAAET,KAAK;MAAEK,QAAQ,EAAEyB,cAAc;MAAExB,MAAM;MAAEC;IAAK,CAAC,CAAC;IAC3E,MAAMyB,OAAO,CAACC,IAAI,CAAC,CAAC;IACpBX,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACtC,IAAI,CAAC;MAAEuC,OAAO,EAAE;IAA+B,CAAC,CAAC;EACnE,CAAC,CAAC,OAAOjC,GAAG,EAAE;IACZH,OAAO,CAACI,KAAK,CAAC,eAAe,EAAED,GAAG,CAAC;IACnC4B,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACtC,IAAI,CAAC;MAAEuC,OAAO,EAAE,wBAAwB;MAAEhC,KAAK,EAAED,GAAG,CAACiC;IAAQ,CAAC,CAAC;EACjF;AACF,CAAC,CAAC;;AAEF;AACA9C,GAAG,CAACuC,IAAI,CAAC,YAAY,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACzC,MAAM;IAAEtB,KAAK;IAAEK;EAAS,CAAC,GAAGgB,GAAG,CAACE,IAAI;EACpC,IAAI;IACF,MAAMW,IAAI,GAAG,MAAMzB,IAAI,CAACoB,OAAO,CAAC;MAAE7B;IAAM,CAAC,CAAC;IAC1C,IAAI,CAACkC,IAAI,EAAE;MACT,OAAOZ,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACtC,IAAI,CAAC;QAAEuC,OAAO,EAAE;MAAiB,CAAC,CAAC;IAC5D;IACA,IAAI,EAAE,MAAM/C,MAAM,CAACuD,OAAO,CAAC9B,QAAQ,EAAE6B,IAAI,CAAC7B,QAAQ,CAAC,CAAC,EAAE;MACpD,OAAOiB,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACtC,IAAI,CAAC;QAAEuC,OAAO,EAAE;MAAqB,CAAC,CAAC;IAChE;IACAL,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACtC,IAAI,CAAC;MACnBuC,OAAO,EAAE,kBAAkB;MAC3BO,IAAI,EAAE;QACJlC,KAAK,EAAEkC,IAAI,CAAClC,KAAK;QACjBO,IAAI,EAAE2B,IAAI,CAAC3B,IAAI;QACfD,MAAM,EAAE4B,IAAI,CAAC5B;MACf;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOZ,GAAG,EAAE;IACZH,OAAO,CAACI,KAAK,CAAC,cAAc,EAAED,GAAG,CAAC;IAClC4B,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACtC,IAAI,CAAC;MAAEuC,OAAO,EAAE,aAAa;MAAEhC,KAAK,EAAED,GAAG,CAACiC;IAAQ,CAAC,CAAC;EACtE;AACF,CAAC,CAAC;;AAEF;AACA9C,GAAG,CAACuC,IAAI,CAAC,gBAAgB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC7C,IAAI;IACF,MAAMc,QAAQ,GAAGf,GAAG,CAACE,IAAI;IACzB,MAAMc,OAAO,GAAG,IAAIlB,IAAI,CAACiB,QAAQ,CAAC;IAClC,MAAMC,OAAO,CAACJ,IAAI,CAAC,CAAC;IACpBX,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACtC,IAAI,CAAC;MAAEuC,OAAO,EAAE;IAA2B,CAAC,CAAC;EAC/D,CAAC,CAAC,OAAOjC,GAAG,EAAE;IACZH,OAAO,CAACI,KAAK,CAAC,kBAAkB,EAAED,GAAG,CAAC;IACtC4B,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACtC,IAAI,CAAC;MAAEuC,OAAO,EAAE,qBAAqB;MAAEhC,KAAK,EAAED,GAAG,CAACiC;IAAQ,CAAC,CAAC;EAC9E;AACF,CAAC,CAAC;;AAEF;AACA9C,GAAG,CAACyD,GAAG,CAAC,YAAY,EAAE,OAAOjB,GAAG,EAAEC,GAAG,KAAK;EACxC,IAAI;IACF,MAAMiB,KAAK,GAAG,MAAMpB,IAAI,CAACqB,IAAI,CAAC,CAAC;IAC/BlB,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACtC,IAAI,CAACmD,KAAK,CAAC;EAC7B,CAAC,CAAC,OAAO7C,GAAG,EAAE;IACZH,OAAO,CAACI,KAAK,CAAC,kBAAkB,EAAED,GAAG,CAAC;IACtC4B,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACtC,IAAI,CAAC;MAAEuC,OAAO,EAAE,sBAAsB;MAAEhC,KAAK,EAAED,GAAG,CAACiC;IAAQ,CAAC,CAAC;EAC/E;AACF,CAAC,CAAC;;AAEF;AACA9C,GAAG,CAAC4D,MAAM,CAAC,kBAAkB,EAAE,OAAOpB,GAAG,EAAEC,GAAG,KAAK;EACjD,IAAI;IACF,MAAMb,IAAI,CAACiC,UAAU,CAAC,CAAC,CAAC,CAAC;IACzBpB,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACtC,IAAI,CAAC;MAAEuC,OAAO,EAAE;IAAoB,CAAC,CAAC;EACxD,CAAC,CAAC,OAAOjC,GAAG,EAAE;IACZH,OAAO,CAACI,KAAK,CAAC,oBAAoB,EAAED,GAAG,CAAC;IACxC4B,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACtC,IAAI,CAAC;MAAEuC,OAAO,EAAE,sBAAsB;MAAEhC,KAAK,EAAED,GAAG,CAACiC;IAAQ,CAAC,CAAC;EAC/E;AACF,CAAC,CAAC;AAEF9C,GAAG,CAAC4D,MAAM,CAAC,kBAAkB,EAAE,OAAOpB,GAAG,EAAEC,GAAG,KAAK;EACjD,IAAI;IACF,MAAMH,IAAI,CAACuB,UAAU,CAAC,CAAC,CAAC,CAAC;IACzBpB,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACtC,IAAI,CAAC;MAAEuC,OAAO,EAAE;IAAoB,CAAC,CAAC;EACxD,CAAC,CAAC,OAAOjC,GAAG,EAAE;IACZH,OAAO,CAACI,KAAK,CAAC,oBAAoB,EAAED,GAAG,CAAC;IACxC4B,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACtC,IAAI,CAAC;MAAEuC,OAAO,EAAE,sBAAsB;MAAEhC,KAAK,EAAED,GAAG,CAACiC;IAAQ,CAAC,CAAC;EAC/E;AACF,CAAC,CAAC;;AAEF;AACA9C,GAAG,CAACI,GAAG,CAAC,CAACS,GAAG,EAAE2B,GAAG,EAAEC,GAAG,EAAEqB,IAAI,KAAK;EAC/BpD,OAAO,CAACI,KAAK,CAAC,eAAe,EAAED,GAAG,CAAC;EACnC4B,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACtC,IAAI,CAAC;IAAEuC,OAAO,EAAE;EAAuB,CAAC,CAAC;AAC3D,CAAC,CAAC;;AAEF;AACA,MAAMiB,MAAM,GAAG/D,GAAG,CAACgE,MAAM,CAAC/D,IAAI,EAAE,MAAM;EACpCS,OAAO,CAACC,GAAG,CAAC,sCAAsCV,IAAI,EAAE,CAAC;AAC3D,CAAC,CAAC;;AAEF;AACAc,OAAO,CAACkD,EAAE,CAAC,SAAS,EAAE,MAAM;EAC1BvD,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;EAClDoD,MAAM,CAACG,KAAK,CAAC,MAAM;IACjBrE,QAAQ,CAACsE,UAAU,CAACD,KAAK,CAAC,KAAK,EAAE,MAAM;MACrCxD,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzCI,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}