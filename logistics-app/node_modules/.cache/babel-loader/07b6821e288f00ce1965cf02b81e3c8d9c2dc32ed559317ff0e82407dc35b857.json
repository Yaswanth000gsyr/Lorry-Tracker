{"ast":null,"code":"const express = require('express');\nconst cors = require('cors');\nconst mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst app = express();\nconst PORT = 5000;\nconst JWT_SECRET = 'your_secret_key'; // replace this with a strong key in production\n\napp.use(cors());\napp.use(express.json());\n\n// ------------------ MongoDB Connection ------------------\nmongoose.connect('mongodb://127.0.0.1:27017/lorry-tracker', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log('MongoDB connected')).catch(err => console.error('MongoDB connection error:', err));\n\n// ------------------ Schemas ------------------\n\nconst userSchema = new mongoose.Schema({\n  username: String,\n  email: {\n    type: String,\n    unique: true\n  },\n  password: String,\n  role: String // owner / driver / broker\n});\nconst loadSchema = new mongoose.Schema({\n  start: String,\n  destination: String,\n  fuel: Number,\n  payment: Number,\n  timeLimit: String,\n  postedBy: String,\n  // user ID or email\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\nconst User = mongoose.model('User', userSchema);\nconst Load = mongoose.model('Load', loadSchema);\n\n// ------------------ Routes ------------------\n\n// Test route\napp.get('/', (req, res) => {\n  res.send('Lorry Tracker API is running');\n});\n\n// Register\napp.post('/api/register', async (req, res) => {\n  const {\n    username,\n    email,\n    password,\n    role\n  } = req.body;\n  try {\n    const existingUser = await User.findOne({\n      email\n    });\n    if (existingUser) return res.status(400).json({\n      error: 'User already exists'\n    });\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const newUser = await User.create({\n      username,\n      email,\n      password: hashedPassword,\n      role\n    });\n    res.status(201).json({\n      message: 'User registered successfully'\n    });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({\n      error: 'Registration failed'\n    });\n  }\n});\n\n// Login\napp.post('/api/login', async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    const user = await User.findOne({\n      email\n    });\n    if (!user) return res.status(400).json({\n      error: 'Invalid credentials'\n    });\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) return res.status(400).json({\n      error: 'Invalid credentials'\n    });\n    const token = jwt.sign({\n      id: user._id,\n      role: user.role\n    }, JWT_SECRET, {\n      expiresIn: '7d'\n    });\n    res.json({\n      token,\n      user: {\n        id: user._id,\n        username: user.username,\n        role: user.role\n      }\n    });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({\n      error: 'Login failed'\n    });\n  }\n});\n\n// Post a Load\napp.post('/api/postload', async (req, res) => {\n  const {\n    start,\n    destination,\n    fuel,\n    payment,\n    timeLimit,\n    postedBy\n  } = req.body;\n  try {\n    const newLoad = await Load.create({\n      start,\n      destination,\n      fuel,\n      payment,\n      timeLimit,\n      postedBy\n    });\n    res.status(201).json({\n      message: 'Load posted successfully',\n      load: newLoad\n    });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({\n      error: 'Failed to post load'\n    });\n  }\n});\n\n// Get All Loads\napp.get('/api/loads', async (req, res) => {\n  try {\n    const loads = await Load.find().sort({\n      createdAt: -1\n    });\n    res.json(loads);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({\n      error: 'Failed to fetch loads'\n    });\n  }\n});\n\n// ------------------ Start Server ------------------\n\napp.listen(PORT, () => {\n  console.log(`Server is running on http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","cors","mongoose","bcrypt","jwt","app","PORT","JWT_SECRET","use","json","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","error","userSchema","Schema","username","String","email","type","unique","password","role","loadSchema","start","destination","fuel","Number","payment","timeLimit","postedBy","createdAt","Date","default","now","User","model","Load","get","req","res","send","post","body","existingUser","findOne","status","hashedPassword","hash","newUser","create","message","user","isMatch","compare","token","sign","id","_id","expiresIn","newLoad","load","loads","find","sort","listen"],"sources":["S:/lorry/logistics-app/src/components/PostLoadForm.jsx"],"sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst mongoose = require('mongoose');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst app = express();\r\nconst PORT = 5000;\r\nconst JWT_SECRET = 'your_secret_key'; // replace this with a strong key in production\r\n\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n// ------------------ MongoDB Connection ------------------\r\nmongoose.connect('mongodb://127.0.0.1:27017/lorry-tracker', {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n})\r\n.then(() => console.log('MongoDB connected'))\r\n.catch((err) => console.error('MongoDB connection error:', err));\r\n\r\n// ------------------ Schemas ------------------\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  username: String,\r\n  email: { type: String, unique: true },\r\n  password: String,\r\n  role: String, // owner / driver / broker\r\n});\r\n\r\nconst loadSchema = new mongoose.Schema({\r\n  start: String,\r\n  destination: String,\r\n  fuel: Number,\r\n  payment: Number,\r\n  timeLimit: String,\r\n  postedBy: String, // user ID or email\r\n  createdAt: { type: Date, default: Date.now }\r\n});\r\n\r\nconst User = mongoose.model('User', userSchema);\r\nconst Load = mongoose.model('Load', loadSchema);\r\n\r\n// ------------------ Routes ------------------\r\n\r\n// Test route\r\napp.get('/', (req, res) => {\r\n  res.send('Lorry Tracker API is running');\r\n});\r\n\r\n// Register\r\napp.post('/api/register', async (req, res) => {\r\n  const { username, email, password, role } = req.body;\r\n\r\n  try {\r\n    const existingUser = await User.findOne({ email });\r\n    if (existingUser) return res.status(400).json({ error: 'User already exists' });\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    const newUser = await User.create({ username, email, password: hashedPassword, role });\r\n\r\n    res.status(201).json({ message: 'User registered successfully' });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ error: 'Registration failed' });\r\n  }\r\n});\r\n\r\n// Login\r\napp.post('/api/login', async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    const user = await User.findOne({ email });\r\n    if (!user) return res.status(400).json({ error: 'Invalid credentials' });\r\n\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) return res.status(400).json({ error: 'Invalid credentials' });\r\n\r\n    const token = jwt.sign({ id: user._id, role: user.role }, JWT_SECRET, { expiresIn: '7d' });\r\n\r\n    res.json({ token, user: { id: user._id, username: user.username, role: user.role } });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ error: 'Login failed' });\r\n  }\r\n});\r\n\r\n// Post a Load\r\napp.post('/api/postload', async (req, res) => {\r\n  const { start, destination, fuel, payment, timeLimit, postedBy } = req.body;\r\n\r\n  try {\r\n    const newLoad = await Load.create({ start, destination, fuel, payment, timeLimit, postedBy });\r\n    res.status(201).json({ message: 'Load posted successfully', load: newLoad });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ error: 'Failed to post load' });\r\n  }\r\n});\r\n\r\n// Get All Loads\r\napp.get('/api/loads', async (req, res) => {\r\n  try {\r\n    const loads = await Load.find().sort({ createdAt: -1 });\r\n    res.json(loads);\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ error: 'Failed to fetch loads' });\r\n  }\r\n});\r\n\r\n// ------------------ Start Server ------------------\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on http://localhost:${PORT}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}