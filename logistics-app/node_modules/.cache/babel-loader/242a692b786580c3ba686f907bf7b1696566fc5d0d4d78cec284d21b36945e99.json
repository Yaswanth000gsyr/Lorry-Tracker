{"ast":null,"code":"// server.js\nconst express = require(\"express\");\nconst cors = require(\"cors\");\nconst mongoose = require(\"mongoose\");\nconst app = express();\nconst PORT = 5000;\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// MongoDB Connection\nconst MONGO_URI = \"mongodb://127.0.0.1:27017/lorry-tracker\";\nmongoose.connect(MONGO_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log(\"MongoDB connected\")).catch(err => console.error(\"MongoDB connection error:\", err));\n\n// Mongoose Schemas\nconst UserSchema = new mongoose.Schema({\n  name: String,\n  email: String,\n  password: String,\n  role: String // 'owner', 'driver', 'broker'\n});\nconst LoadSchema = new mongoose.Schema({\n  start: String,\n  destination: String,\n  fuel: Number,\n  payment: Number,\n  timeLimit: String,\n  postedBy: String,\n  postedAt: {\n    type: Date,\n    default: Date.now\n  }\n});\nconst User = mongoose.model(\"User\", UserSchema);\nconst Load = mongoose.model(\"Load\", LoadSchema);\n\n// Routes\n\n// User Registration\napp.post(\"/api/auth/register\", async (req, res) => {\n  try {\n    const {\n      name,\n      email,\n      password,\n      role\n    } = req.body;\n    const existing = await User.findOne({\n      email\n    });\n    if (existing) return res.status(400).json({\n      error: \"Email already exists\"\n    });\n    const newUser = new User({\n      name,\n      email,\n      password,\n      role\n    });\n    await newUser.save();\n    res.status(201).json({\n      message: \"User registered\"\n    });\n  } catch (err) {\n    res.status(500).json({\n      error: \"Registration failed\"\n    });\n  }\n});\n\n// User Login\napp.post(\"/api/auth/login\", async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n    const user = await User.findOne({\n      email\n    });\n    if (!user || user.password !== password) {\n      return res.status(401).json({\n        error: \"Invalid credentials\"\n      });\n    }\n    res.json({\n      message: \"Login successful\",\n      user\n    });\n  } catch (err) {\n    res.status(500).json({\n      error: \"Login failed\"\n    });\n  }\n});\n\n// Post Load\napp.post(\"/api/loads\", async (req, res) => {\n  try {\n    const load = new Load(req.body);\n    await load.save();\n    res.status(201).json({\n      message: \"Load posted successfully\"\n    });\n  } catch (err) {\n    res.status(500).json({\n      error: \"Failed to post load\"\n    });\n  }\n});\n\n// Get All Loads\napp.get(\"/api/loads\", async (req, res) => {\n  try {\n    const loads = await Load.find().sort({\n      postedAt: -1\n    });\n    res.json(loads);\n  } catch (err) {\n    res.status(500).json({\n      error: \"Failed to fetch loads\"\n    });\n  }\n});\n\n// Start Server\napp.listen(PORT, () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","cors","mongoose","app","PORT","use","json","MONGO_URI","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","error","UserSchema","Schema","name","String","email","password","role","LoadSchema","start","destination","fuel","Number","payment","timeLimit","postedBy","postedAt","type","Date","default","now","User","model","Load","post","req","res","body","existing","findOne","status","newUser","save","message","user","load","get","loads","find","sort","listen"],"sources":["S:/lorry/logistics-app/src/components/PostLoadForm.jsx"],"sourcesContent":["// server.js\r\nconst express = require(\"express\");\r\nconst cors = require(\"cors\");\r\nconst mongoose = require(\"mongoose\");\r\n\r\nconst app = express();\r\nconst PORT = 5000;\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n// MongoDB Connection\r\nconst MONGO_URI = \"mongodb://127.0.0.1:27017/lorry-tracker\";\r\nmongoose\r\n  .connect(MONGO_URI, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n  })\r\n  .then(() => console.log(\"MongoDB connected\"))\r\n  .catch((err) => console.error(\"MongoDB connection error:\", err));\r\n\r\n// Mongoose Schemas\r\nconst UserSchema = new mongoose.Schema({\r\n  name: String,\r\n  email: String,\r\n  password: String,\r\n  role: String, // 'owner', 'driver', 'broker'\r\n});\r\n\r\nconst LoadSchema = new mongoose.Schema({\r\n  start: String,\r\n  destination: String,\r\n  fuel: Number,\r\n  payment: Number,\r\n  timeLimit: String,\r\n  postedBy: String,\r\n  postedAt: { type: Date, default: Date.now },\r\n});\r\n\r\nconst User = mongoose.model(\"User\", UserSchema);\r\nconst Load = mongoose.model(\"Load\", LoadSchema);\r\n\r\n// Routes\r\n\r\n// User Registration\r\napp.post(\"/api/auth/register\", async (req, res) => {\r\n  try {\r\n    const { name, email, password, role } = req.body;\r\n    const existing = await User.findOne({ email });\r\n    if (existing) return res.status(400).json({ error: \"Email already exists\" });\r\n\r\n    const newUser = new User({ name, email, password, role });\r\n    await newUser.save();\r\n    res.status(201).json({ message: \"User registered\" });\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Registration failed\" });\r\n  }\r\n});\r\n\r\n// User Login\r\napp.post(\"/api/auth/login\", async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    const user = await User.findOne({ email });\r\n\r\n    if (!user || user.password !== password) {\r\n      return res.status(401).json({ error: \"Invalid credentials\" });\r\n    }\r\n\r\n    res.json({ message: \"Login successful\", user });\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Login failed\" });\r\n  }\r\n});\r\n\r\n// Post Load\r\napp.post(\"/api/loads\", async (req, res) => {\r\n  try {\r\n    const load = new Load(req.body);\r\n    await load.save();\r\n    res.status(201).json({ message: \"Load posted successfully\" });\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Failed to post load\" });\r\n  }\r\n});\r\n\r\n// Get All Loads\r\napp.get(\"/api/loads\", async (req, res) => {\r\n  try {\r\n    const loads = await Load.find().sort({ postedAt: -1 });\r\n    res.json(loads);\r\n  } catch (err) {\r\n    res.status(500).json({ error: \"Failed to fetch loads\" });\r\n  }\r\n});\r\n\r\n// Start Server\r\napp.listen(PORT, () => {\r\n  console.log(`Server running on http://localhost:${PORT}`);\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}